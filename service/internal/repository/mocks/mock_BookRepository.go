// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "readcommend/internal/repository/model"

	mock "github.com/stretchr/testify/mock"
)

// MockBookRepository is an autogenerated mock type for the BookRepository type
type MockBookRepository struct {
	mock.Mock
}

type MockBookRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookRepository) EXPECT() *MockBookRepository_Expecter {
	return &MockBookRepository_Expecter{mock: &_m.Mock}
}

// GetAuthors provides a mock function with given fields: ctx, search, limit
func (_m *MockBookRepository) GetAuthors(ctx context.Context, search string, limit int) ([]model.Author, error) {
	ret := _m.Called(ctx, search, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthors")
	}

	var r0 []model.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]model.Author, error)); ok {
		return rf(ctx, search, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []model.Author); ok {
		r0 = rf(ctx, search, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, search, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookRepository_GetAuthors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthors'
type MockBookRepository_GetAuthors_Call struct {
	*mock.Call
}

// GetAuthors is a helper method to define mock.On call
//   - ctx context.Context
//   - search string
//   - limit int
func (_e *MockBookRepository_Expecter) GetAuthors(ctx interface{}, search interface{}, limit interface{}) *MockBookRepository_GetAuthors_Call {
	return &MockBookRepository_GetAuthors_Call{Call: _e.mock.On("GetAuthors", ctx, search, limit)}
}

func (_c *MockBookRepository_GetAuthors_Call) Run(run func(ctx context.Context, search string, limit int)) *MockBookRepository_GetAuthors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockBookRepository_GetAuthors_Call) Return(_a0 []model.Author, _a1 error) *MockBookRepository_GetAuthors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookRepository_GetAuthors_Call) RunAndReturn(run func(context.Context, string, int) ([]model.Author, error)) *MockBookRepository_GetAuthors_Call {
	_c.Call.Return(run)
	return _c
}

// GetBooks provides a mock function with given fields: ctx, authors, genres, minPages, maxPages, minYear, maxYear, limit
func (_m *MockBookRepository) GetBooks(ctx context.Context, authors []int, genres []int, minPages int, maxPages int, minYear int, maxYear int, limit int) ([]model.Book, error) {
	ret := _m.Called(ctx, authors, genres, minPages, maxPages, minYear, maxYear, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetBooks")
	}

	var r0 []model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int, []int, int, int, int, int, int) ([]model.Book, error)); ok {
		return rf(ctx, authors, genres, minPages, maxPages, minYear, maxYear, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int, []int, int, int, int, int, int) []model.Book); ok {
		r0 = rf(ctx, authors, genres, minPages, maxPages, minYear, maxYear, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int, []int, int, int, int, int, int) error); ok {
		r1 = rf(ctx, authors, genres, minPages, maxPages, minYear, maxYear, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookRepository_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type MockBookRepository_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
//   - ctx context.Context
//   - authors []int
//   - genres []int
//   - minPages int
//   - maxPages int
//   - minYear int
//   - maxYear int
//   - limit int
func (_e *MockBookRepository_Expecter) GetBooks(ctx interface{}, authors interface{}, genres interface{}, minPages interface{}, maxPages interface{}, minYear interface{}, maxYear interface{}, limit interface{}) *MockBookRepository_GetBooks_Call {
	return &MockBookRepository_GetBooks_Call{Call: _e.mock.On("GetBooks", ctx, authors, genres, minPages, maxPages, minYear, maxYear, limit)}
}

func (_c *MockBookRepository_GetBooks_Call) Run(run func(ctx context.Context, authors []int, genres []int, minPages int, maxPages int, minYear int, maxYear int, limit int)) *MockBookRepository_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int), args[2].([]int), args[3].(int), args[4].(int), args[5].(int), args[6].(int), args[7].(int))
	})
	return _c
}

func (_c *MockBookRepository_GetBooks_Call) Return(_a0 []model.Book, _a1 error) *MockBookRepository_GetBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookRepository_GetBooks_Call) RunAndReturn(run func(context.Context, []int, []int, int, int, int, int, int) ([]model.Book, error)) *MockBookRepository_GetBooks_Call {
	_c.Call.Return(run)
	return _c
}

// GetEras provides a mock function with given fields: ctx
func (_m *MockBookRepository) GetEras(ctx context.Context) ([]model.Era, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEras")
	}

	var r0 []model.Era
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Era, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Era); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Era)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookRepository_GetEras_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEras'
type MockBookRepository_GetEras_Call struct {
	*mock.Call
}

// GetEras is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBookRepository_Expecter) GetEras(ctx interface{}) *MockBookRepository_GetEras_Call {
	return &MockBookRepository_GetEras_Call{Call: _e.mock.On("GetEras", ctx)}
}

func (_c *MockBookRepository_GetEras_Call) Run(run func(ctx context.Context)) *MockBookRepository_GetEras_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBookRepository_GetEras_Call) Return(_a0 []model.Era, _a1 error) *MockBookRepository_GetEras_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookRepository_GetEras_Call) RunAndReturn(run func(context.Context) ([]model.Era, error)) *MockBookRepository_GetEras_Call {
	_c.Call.Return(run)
	return _c
}

// GetGenres provides a mock function with given fields: ctx
func (_m *MockBookRepository) GetGenres(ctx context.Context) ([]model.Genre, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGenres")
	}

	var r0 []model.Genre
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Genre, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Genre); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Genre)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookRepository_GetGenres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGenres'
type MockBookRepository_GetGenres_Call struct {
	*mock.Call
}

// GetGenres is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBookRepository_Expecter) GetGenres(ctx interface{}) *MockBookRepository_GetGenres_Call {
	return &MockBookRepository_GetGenres_Call{Call: _e.mock.On("GetGenres", ctx)}
}

func (_c *MockBookRepository_GetGenres_Call) Run(run func(ctx context.Context)) *MockBookRepository_GetGenres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBookRepository_GetGenres_Call) Return(_a0 []model.Genre, _a1 error) *MockBookRepository_GetGenres_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookRepository_GetGenres_Call) RunAndReturn(run func(context.Context) ([]model.Genre, error)) *MockBookRepository_GetGenres_Call {
	_c.Call.Return(run)
	return _c
}

// GetSizes provides a mock function with given fields: ctx
func (_m *MockBookRepository) GetSizes(ctx context.Context) ([]model.Size, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSizes")
	}

	var r0 []model.Size
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Size, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Size); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Size)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookRepository_GetSizes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSizes'
type MockBookRepository_GetSizes_Call struct {
	*mock.Call
}

// GetSizes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBookRepository_Expecter) GetSizes(ctx interface{}) *MockBookRepository_GetSizes_Call {
	return &MockBookRepository_GetSizes_Call{Call: _e.mock.On("GetSizes", ctx)}
}

func (_c *MockBookRepository_GetSizes_Call) Run(run func(ctx context.Context)) *MockBookRepository_GetSizes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBookRepository_GetSizes_Call) Return(_a0 []model.Size, _a1 error) *MockBookRepository_GetSizes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookRepository_GetSizes_Call) RunAndReturn(run func(context.Context) ([]model.Size, error)) *MockBookRepository_GetSizes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookRepository creates a new instance of MockBookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookRepository {
	mock := &MockBookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
